)
) |>
select(-player_location_x,-player_location_y,
-opponent_location_x, -opponent_location_y)
rally_data <- rally_data |>
left_join(matches_homography, by = "match_id") |>
rowwise() |>
mutate(
t_shuttle = list(convert_pixels(H, landing_x, landing_y)),
shuttle_x = t_shuttle[[1]],
shuttle_y = t_shuttle[[2]],
t_chou = list(convert_pixels(H, chou_location_x, chou_location_y)),
chou_x = t_chou[[1]],
chou_y = t_chou[[2]],
t_opp = list(convert_pixels(H, opp_location_x, opp_location_y)),
opp_x = t_opp[[1]],
opp_y = t_opp[[2]]
) |>
select(-t_shuttle, -t_chou, -t_opp,
-chou_location_x, -chou_location_y,
-opp_location_x, -opp_location_y,
-landing_x, -landing_y,-H) |>
ungroup()
chou_matches_metadata <- chou_matches_metadata |>
select(-video)
court_coordinates <- court_coordinates |>
rename(
upleft_x = t_upleft_x,
upleft_y = t_upleft_y,
upright_x = t_upright_x,
upright_y = t_upright_y,
downleft_x = t_downleft_x,
downleft_y = t_downleft_y,
downright_x = t_downright_x,
downright_y = t_downright_y
)
rally_data <- rally_data |>
rename(
set = set_id,
stroke = ball_round,
current_player = player_name,
shot_type = type,
foul = flaw,
rally_winner = point_winner_name
)
set_data <- rally_data |>
group_by(match_id, set) |>
filter(row_number() == n()) |>  # get last row of each set
filter(!is.na(chou_score), !is.na(opp_score)) |>
mutate(
set_winner = if_else(
chou_score > opp_score, "CHOU Tien Chen",
if_else(opp_score > chou_score, "Opponent", NA_character_)
)
) |>
select(match_id, set, set_winner, chou_score, opp_score)
write_csv(chou_matches_metadata, "../cleaned data/matches_metadata.csv")
write_csv(court_coordinates, "../cleaned data/court_coordinates.csv")
write_csv(rally_data, "../cleaned data/rally_data.csv")
write_csv(set_data, "../cleaned data/set_data.csv")
View(set_data)
source("C:/Users/Keerthi/Desktop/STAT468_Final_Project/data/cleaning.R", echo = TRUE)
source("C:/Users/Keerthi/Desktop/STAT468_Final_Project/data/cleaning.R", echo = TRUE)
source("C:/Users/Keerthi/Desktop/STAT468_Final_Project/data/cleaning.R", echo = TRUE)
source("C:/Users/Keerthi/Desktop/STAT468_Final_Project/data/cleaning.R", echo = TRUE)
library(dplyr)
library(ggplot2)
library(gt)
library(lubridate)
matches_metadata <-
readr::read_csv("../cleaned data/matches_metadata.csv",
show_col_types = FALSE)
set_data <-
readr::read_csv("../cleaned data/set_data.csv",
show_col_types = FALSE)
court_coordinates <-
readr::read_csv("../cleaned data/court_coordinates.csv",
show_col_types = FALSE)
rally_data <-
readr::read_csv("../cleaned data/rally_data.csv",
show_col_types = FALSE)
table_1 <- set_data |>
left_join(matches_metadata |>
select(match_id, tournament, round, year,
winner, loser), by = "match_id") |>
rename(
match_winner = winner,
match_loser = loser
) |>
mutate(
set_loser = if_else(set_winner == match_winner,
match_loser, match_winner),
set_winner_points = if_else(set_winner == "CHOU Tien Chen",
chou_score, opp_score),
set_loser_points = if_else(set_loser == "CHOU Tien Chen",
chou_score, opp_score)
) |>
select(-chou_score,-opp_score) |>
arrange(year)
table_1 <- table_1 |>
mutate(
match_label = paste0(
tournament, " / ", round, " / ", year, " / ", match_winner, "* vs ", match_loser
),
set_score = paste0(set_winner_points, " - ", set_loser_points,
" (", abs(set_winner_points - set_loser_points), ")"),
set_label = paste0("Set ", set)
)
table_1 |>
select(
match_label, set_label, set_winner, set_loser, set_score
) |>
gt(groupname_col = "match_label") |>
cols_label(
set_label = "",
set_winner = "",
set_loser = "",
set_score = ""
) |>
tab_options(
table.background.color = "#f9f9f9",
table.border.top.style = "none",
table.border.bottom.style = "none",
heading.border.bottom.style = "none",
column_labels.border.top.style = "none",
column_labels.border.bottom.style = "none",
row.striping.include_table_body = FALSE
) |>
cols_align(
align = "left",
columns = c(set_label, set_winner, set_loser, set_score)
) |>
tab_style(
style = cell_text(indent = px(20)),
locations = cells_body(columns = set_label)
) |>
tab_style(
style = list(cell_fill(color = "#E4F2D5")),
locations = cells_body(columns = set_winner,
rows = set_winner == "CHOU Tien Chen")
) |>
tab_style(
style = list(cell_fill(color = "#FFCCCB")),
locations = cells_body(columns = set_loser,
rows = set_loser == "CHOU Tien Chen")
) |>
tab_source_note(
md("**Notes**: An asterisk (*) next to a player's name in the header indicates the match winner.
The table displays each set’s number, set winner and loser, and final score with the point difference in parentheses.
Green highlights indicate sets won by CHOU Tien Chen and red highlights indicate sets lost by him.")
)|>
opt_stylize(style = 6, color = 'gray')
table_2 <- matches_metadata |>
summarise(
matches_played = n(),
matches_won = sum(winner == "CHOU Tien Chen"),
matches_summary = paste(matches_won,"/",matches_played)
)
table_2 |>
select(matches_summary) |>
gt() |>
cols_label(
matches_summary = "Matches Won"
) |>
tab_options(
table.background.color = "#E5E4E2"
) |>
tab_style(
style = cell_text(align = "center"),
locations = cells_body()
) |>
opt_stylize(style = 6, color = 'gray')
rally_lengths <- rally_data |>
filter(!is.na(rally_winner)) |>
group_by(match_id, set, rally) |>
slice_tail(n = 1) |>
summarise(
rally_length = max(stroke),
rally_winner = rally_winner,
.groups = "drop"
)|>
mutate(
chou_result = if_else(
rally_winner == "CHOU Tien Chen",
"Win",
"Loss"
)
)
mean_length <- mean(rally_lengths$rally_length, na.rm = TRUE)
sd_length <- sd(rally_lengths$rally_length, na.rm = TRUE)
rally_lengths |>
summarise(
count = n(),
mean = mean(rally_length),
sd = sd(rally_length),
min = min(rally_length),
Q1 = quantile(rally_length, 0.25),
median = median(rally_length),
Q3 = quantile(rally_length, 0.75),
max = max(rally_length)
) |>
gt() |>
fmt_number(columns = everything(), decimals = 0) |>
cols_label(
count = "No. of rallies",
mean = "Mean",
sd = "Standard deviation",
min = "Minimum",
Q1 = "Q1",
median = "Median",
Q3 = "Q3",
max = "Maximum"
) |>
cols_align(align = "center", columns = everything()) |>
tab_style(
style = cell_text(align = "center"),
locations = cells_column_labels(columns = everything())
) |>
tab_options(
data_row.padding = px(6),
column_labels.padding = px(10),
table.width = pct(100)
) |>
opt_stylize(style = 6, color = "gray")
ggplot(rally_lengths, aes(x = rally_length)) +
geom_histogram(binwidth = 1,
fill = "#A3D1FF", color = "white") +
geom_vline(aes(xintercept = mean_length),
color = "black", linetype = "solid",
size = 0.1) +
geom_vline(aes(xintercept = mean_length + sd_length),
color = "black", linetype = "dashed",
size = 0.1) +
geom_vline(aes(xintercept = mean_length - sd_length),
color = "black", linetype = "dashed",
size = 0.1) +
labs(
title = "Distribution of Rally Lengths",
x = "Number of Strokes in a Rally",
y = "Frequency"
) +
theme_minimal()
ggplot(rally_lengths,
aes(rally_length, fill = chou_result)) +
geom_histogram(binwidth = 3, color = "white")  +
scale_fill_manual(
values = c("Win" = "#CDECCB", "Loss" = "#FFB3B3"),
name = "CHOU Tien Chen"
) +
labs(
title = "Rally Length Distribution by CHOU Tien Chen's Wins and Losses",
x = "Number of Strokes in a Rally",
y = "Frequency"
) +
theme_minimal()
chou_shots <- rally_data |>
filter(current_player == "CHOU Tien Chen") |>
group_by(match_id, set, rally) |>
mutate(
last_by_chou = row_number() == max(row_number())) |>
filter(last_by_chou) |>
select(match_id, set, rally, shot_type, rally_winner)|>
filter(!is.na(rally_winner)) |>
mutate(won_point = if_else(rally_winner == "CHOU Tien Chen", 1, 0)) |>
group_by(shot_type) |>
summarise(
total = n(),
points_won = sum(won_point),
.groups = "drop"
) |>
ungroup()
ggplot(chou_shots, aes(x = fct_reorder(shot_type, total), y = total, fill = points_won)) +
geom_col() +
coord_flip() +
scale_fill_gradient(low = "#FFB3B3", high = "#CDECCB", name = "Points Won") +
labs(
title = "CHOU Tien Chen’s Shot Types and Their Success",
x = "Shot Type",
y = "Number of Times Used"
) +
theme_minimal()
winning_shots <- rally_data |>
filter(current_player == "CHOU Tien Chen") |>
group_by(match_id, set, rally) |>
slice_tail(n = 1) |>
filter(rally_winner == "CHOU Tien Chen") |>
select(match_id, set, rally, shot_type) |>
ungroup() |>
count(shot_type, name = "chou_wins")
ggplot(winning_shots, aes(x = fct_reorder(shot_type, chou_wins), y = chou_wins)) +
geom_col(fill = "#CDECCB") +
coord_flip() +
labs(
title = "CHOU Tien Chen’s Winning Shots",
x = "Shot Type",
y = "Rallies Won by CHOU"
) +
theme_minimal()
winning_shots_hand <- rally_data |>
filter(current_player == "CHOU Tien Chen") |>
group_by(match_id, set, rally) |>
slice_tail(n = 1) |>
filter(rally_winner == "CHOU Tien Chen") |>
select(match_id, set, rally, shot_type, backhand) |>
mutate(hand = if_else(backhand == 1, "Backhand", "Fronthand")) |>
ungroup() |>
count(shot_type, hand)
ggplot(winning_shots_hand, aes(x = fct_reorder(shot_type, n, sum), y = n, fill = hand)) +
geom_col() +
coord_flip() +
scale_fill_manual(values = c("Fronthand" = "#A3D1FF", "Backhand" = "#2A7BC4")) +
labs(
title = "CHOU Tien Chen’s Winning Shots by Hand Used",
x = "Shot Type",
y = "Rallies Won",
fill = "Hand Used"
) +
theme_minimal()
rally_data |>
filter(current_player == "CHOU Tien Chen") |>
select(match_id, set, rally, backhand, rally_winner) |>
group_by(match_id, set, rally) |>
slice_tail(n = 1) |>
filter(!is.na(rally_winner)) |>
mutate(
hand = if_else(backhand == 1, "Backhand", "Fronthand"),
point_won = rally_winner == "CHOU Tien Chen"
) |>
group_by(hand) |>
summarise(
total = n(),
points_won = sum(point_won),
pct_won = round(100 * points_won / total, 1),
.groups = "drop"
) |>
gt() |>
fmt_number(columns = c(total, points_won), decimals = 0) |>
fmt_percent(columns = pct_won, scale_values = FALSE, decimals = 0) |>
cols_label(
hand = "Hand",
total = "Total Shots",
points_won = "Total Points",
pct_won = "% Shots Scored"
) |>
cols_align(align = "center", columns = everything()) |>
tab_style(
style = cell_text(align = "center"),
locations = cells_column_labels(columns = everything())
) |>
tab_options(
data_row.padding = px(6),
column_labels.padding = px(10),
table.width = pct(100)
) |>
opt_stylize(style = 6, color = "gray")
loosing_shots <- rally_data |>
filter(current_player != "CHOU Tien Chen") |>
group_by(match_id, set, rally) |>
slice_tail(n = 1) |>
filter(rally_winner != "CHOU Tien Chen") |>
select(match_id, set, rally, shot_type) |>
ungroup() |>
count(shot_type, name = "chou_losses")
ggplot(loosing_shots, aes(x = fct_reorder(shot_type, chou_losses), y = chou_losses)) +
geom_col(fill = "#FFB3B3") +
coord_flip() +
labs(
title = "Opponent Shots That Led to CHOU Tien Chen Losing",
x = "Shot Type",
y = "Rallies Lost by CHOU"
) +
theme_minimal()
shuttle_points <- rally_data |>
filter(!is.na(shuttle_x), !is.na(shuttle_y))|>
count(shuttle_x, shuttle_y, name = "freq")
# Court polygon
court_df <- tibble(
x = c(
court_coordinates$upleft_x,
court_coordinates$upright_x,
court_coordinates$downright_x,
court_coordinates$downleft_x
),
y = c(
court_coordinates$upleft_y,
court_coordinates$upright_y,
court_coordinates$downright_y,
court_coordinates$downleft_y
)
)
# Net line
net_y <- (court_coordinates$upleft_y + court_coordinates$downleft_y) / 2
net_df <- tibble(
x = c(court_coordinates$upleft_x, court_coordinates$upright_x),
y = c(net_y, net_y)
)
# Plot court with points
ggplot() +
geom_polygon(data = court_df, aes(x = x, y = y), fill = "white", color = "black") +
geom_line(data = net_df, aes(x = x, y = y), color = "red", linetype = "solid", linewidth = 1) +
geom_point(
data = shuttle_points,
aes(x = shuttle_x, y = shuttle_y, size = freq, alpha = freq),
color = "#2A7BC4"
) +
scale_size_continuous(range = c(1, 6), guide = "none") +
scale_alpha_continuous(range = c(0.2, 0.9), guide = "none") +
coord_fixed() +
labs(
title = "Shuttle Landing Points",
subtitle = "Point size and transparency reflect frequency",
x = NULL,
y = NULL
) +
theme_minimal() +
theme(
axis.text = element_blank(),
axis.title = element_blank(),
panel.grid = element_blank()
)
chou_shots_win <- rally_data |>
filter(current_player == "CHOU Tien Chen") |>
filter(!is.na(shuttle_x), !is.na(shuttle_y), !is.na(chou_y), !is.na(rally_winner)) |>
group_by(match_id, set, rally) |>
slice_tail(n = 1) |>
mutate(
point_outcome = if_else(rally_winner == "CHOU Tien Chen", "Win", "No Point"),
shuttle_y_mirrored = if_else(chou_y < net_y, 2 * net_y - shuttle_y, shuttle_y),
shuttle_x_mirrored = shuttle_x  # <- this line is corrected
) |>
filter(point_outcome == "Win")
ggplot() +
geom_polygon(data = court_df, aes(x = x, y = y), fill = "white", color = "black") +
geom_line(data = net_df, aes(x = x, y = y), color = "red", linetype = "solid", linewidth = .5) +
geom_point(
data = chou_shots_win,
aes(x = shuttle_x_mirrored, y = shuttle_y_mirrored, color = shot_type),
alpha = 0.7,
size = 3
) +
coord_fixed() +
labs(
title = "CHOU's Winning Shuttle Landing Positions",
color = "Shot Type"
) + scale_color_viridis_d(option = "D") + guides(color = guide_legend(ncol = 2)) +
theme_minimal() +
theme(
axis.text = element_blank(),
axis.title = element_blank(),
panel.grid = element_blank()
) +
annotate("text",
x = (court_coordinates$upleft_x + court_coordinates$upright_x) / 2,
y = court_coordinates$downleft_y + 30,
label = "CHOU Tien Chen",
size = 3,  color = "black", hjust = 0.5) +
annotate("text",
x = (court_coordinates$upleft_x + court_coordinates$upright_x) / 2,
y = court_coordinates$upleft_y - 30,
label = "Opponent",
size = 3,  color = "black", hjust = 0.5)
# Filter for opponent's winning shots (CHOU lost the point)
opp_shots_win <- rally_data |>
filter(current_player != "CHOU Tien Chen") |>
filter(!is.na(shuttle_x), !is.na(shuttle_y), !is.na(opp_y), !is.na(rally_winner)) |>
group_by(match_id, set, rally) |>
slice_tail(n = 1) |>
filter(rally_winner != "CHOU Tien Chen") |>
mutate(
shuttle_y_mirrored = if_else(opp_y > net_y, 2 * net_y - shuttle_y, shuttle_y),
shuttle_x_mirrored = shuttle_x
)
# Plot for CHOU's losing points from opponent shots
ggplot() +
geom_polygon(data = court_df, aes(x = x, y = y), fill = "white", color = "black") +
geom_line(data = net_df, aes(x = x, y = y), color = "red", linetype = "solid", linewidth = .5) +
geom_point(
data = opp_shots_win,
aes(x = shuttle_x_mirrored, y = shuttle_y_mirrored, color = shot_type),
alpha = 0.7,
size = 3
) +
coord_fixed() +
labs(
title = "CHOU's Losing Shuttle Landing Positions",
color = "Shot Type"
) +
scale_color_viridis_d(option = "D") +
guides(color = guide_legend(ncol = 2)) +
theme_minimal() +
theme(
axis.text = element_blank(),
axis.title = element_blank(),
panel.grid = element_blank()
) +
annotate("text",
x = (court_coordinates$upleft_x + court_coordinates$upright_x) / 2,
y = court_coordinates$downleft_y + 30,
label = "CHOU Tien Chen",
size = 3,  color = "black", hjust = 0.5) +
annotate("text",
x = (court_coordinates$upleft_x + court_coordinates$upright_x) / 2,
y = court_coordinates$upleft_y - 30,
label = "Opponent",
size = 3,  color = "black", hjust = 0.5)
# Find incorrectly mirrored points (should all be on top half i.e. shuttle_y_mirrored > net_y)
bad_points <- opp_shots_win |>
filter(shuttle_y_mirrored < net_y) |>
select(match_id, set, rally, stroke, shuttle_x, shuttle_y, shuttle_x_mirrored, shuttle_y_mirrored, shot_type)
print(bad_points)
View(rally_data)
View(matches_metadata)
